//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by client-gen/saf1u. DO NOT EDIT.

// Code generated by informer-gen. DO NOT EDIT.

package v1

import (
	"context"
	time "time"

	hauscomv1 "github.com/saf1u/haus.com/pkg/apis/haus.com/v1"
	versioned "github.com/saf1u/haus.com/pkg/client/clientset/versioned"
	internalinterfaces "github.com/saf1u/haus.com/pkg/client/informers/externalversions/internalinterfaces"
	v1 "github.com/saf1u/haus.com/pkg/client/listers/haus.com/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// HausInformer provides access to a shared informer and lister for
// Hauses.
type HausInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1.HausLister
}

type hausInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewHausInformer constructs a new informer for Haus type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewHausInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredHausInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredHausInformer constructs a new informer for Haus type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredHausInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.SamplecontrollerV1().Hauses(namespace).List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.SamplecontrollerV1().Hauses(namespace).Watch(context.TODO(), options)
			},
		},
		&hauscomv1.Haus{},
		resyncPeriod,
		indexers,
	)
}

func (f *hausInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredHausInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *hausInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&hauscomv1.Haus{}, f.defaultInformer)
}

func (f *hausInformer) Lister() v1.HausLister {
	return v1.NewHausLister(f.Informer().GetIndexer())
}
