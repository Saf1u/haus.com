//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by client-gen/saf1u. DO NOT EDIT.

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/saf1u/haus.com/pkg/apis/haus.com/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HausLister helps list Hauses.
// All objects returned here must be treated as read-only.
type HausLister interface {
	// List lists all Hauses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Haus, err error)
	// Hauses returns an object that can list and get Hauses.
	Hauses(namespace string) HausNamespaceLister
	HausListerExpansion
}

// hausLister implements the HausLister interface.
type hausLister struct {
	indexer cache.Indexer
}

// NewHausLister returns a new HausLister.
func NewHausLister(indexer cache.Indexer) HausLister {
	return &hausLister{indexer: indexer}
}

// List lists all Hauses in the indexer.
func (s *hausLister) List(selector labels.Selector) (ret []*v1.Haus, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Haus))
	})
	return ret, err
}

// Hauses returns an object that can list and get Hauses.
func (s *hausLister) Hauses(namespace string) HausNamespaceLister {
	return hausNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HausNamespaceLister helps list and get Hauses.
// All objects returned here must be treated as read-only.
type HausNamespaceLister interface {
	// List lists all Hauses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Haus, err error)
	// Get retrieves the Haus from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Haus, error)
	HausNamespaceListerExpansion
}

// hausNamespaceLister implements the HausNamespaceLister
// interface.
type hausNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Hauses in the indexer for a given namespace.
func (s hausNamespaceLister) List(selector labels.Selector) (ret []*v1.Haus, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Haus))
	})
	return ret, err
}

// Get retrieves the Haus from the indexer for a given namespace and name.
func (s hausNamespaceLister) Get(name string) (*v1.Haus, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("haus"), name)
	}
	return obj.(*v1.Haus), nil
}
